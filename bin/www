#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs');
//child.execSync(`export LD_LIBRARY_PARH=/home/vcap/app`);
//process.env['$LD_LIBRARY_PATH'] = '/home/vcap/app';
//console.log(fs.readdirSync('./instantclient'))
//console.log(child.execSync(`echo $LD_LIBRARY_PATH`).toString());

var app = require('../app');
var debug = require('debug')('City of Denton:server');
var http = require('http');
var browserSync = require('browser-sync');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
const listening = () => {
  browserSync({
    proxy: 'localhost:' + port,
    "https": true,
    files: ['public/**/*.{js,css,html}', 'views/*.*', 'views/**/*.{html,jade,pug,ejs}']
  });
}

if (process.env.VCAP_APPLICATION) {
  server.listen(port);
} else {
  server.listen(port, listening);
}
server.on('error', onError);
server.on('listening', onListening);

function exitHandler(options, err) {
  server.close(function() {
    console.log("Closed out remaining connections.");
    process.exit()
  });  
}

//do something when app is closing
process.on('exit', exitHandler.bind(null,{cleanup:true}));
//catches ctrl+c event
process.on('SIGINT', exitHandler.bind(null, {exit:true}));
// catches "kill pid" (for example: nodemon restart)
process.on('SIGUSR1', exitHandler.bind(null, {exit:true}));
process.on('SIGUSR2', exitHandler.bind(null, {exit:true}));
//catches uncaught exceptions
process.on('uncaughtException', exitHandler.bind(null, {exit:true}));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
